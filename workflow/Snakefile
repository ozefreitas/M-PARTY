configfile: "config/config.yaml"

from scripts.snakemake_util import get_target_db, get_clusters, threshold2clusters, clusters_in_list, get_UPI_queryDB, build_UPI_query_DB
from glob import glob


db_name = get_target_db(config)
upi_db = get_UPI_queryDB(config)

print(f'Databases name\'s set to {db_name}. New folders will be created with this name.\n')
if upi_db == "uniprot" or upi_db == "swissprot":
	print(f'UPIMAPI query database set to {upi_db}. Download will start shortly.\n')
else:
	print(f'UPIMAPI query database set to {upi_db}')


rule all:
	input:
		expand("resources/Data/HMMs/{db}/After_tcoffee_UPI/{threshold}.hmm", db=db_name, threshold=config["thresholds"])


rule t_coffee:
	input:
		# ["resources/Data/FASTA/CDHIT/{threshold}/{cluster}.fasta".format(threshold=config["thresholds"][x], 
		# cluster=big_list_clusters[x][y]) for x in range(len(config["thresholds"])) for y in range(len(big_list_clusters[x]))]
		"resources/Data/FASTA/{db}/CDHIT/{threshold}/{cluster}.fasta"
	output:
		"resources/Alignments/{db}/MultipleSequencesAlign/T_Coffee_UPI/{threshold}/{cluster}.clustal_aln"
		# expand("resources/Alignments/MultipleSequencesAlign/T_Coffee_UPI/{threshold}/{cluster}.clustal_aln", threshold=config["thresholds"], cluster=threshold2clusters[threshold])
	threads: config["threads"]
	log:
		"logs/{db}_t_coffee_{threshold}_{cluster}.log"
	# script:
	# 	"scripts/db_construction/t_coffee_run.py"
	shell:
		"t_coffee {input} -output clustalw_aln -outfile {output}"


# rule mockup:
# 	input:
# 		# expand("resources/Data/FASTA/CDHIT/{threshold}/{cluster}.fasta", threshold=config["thresholds"], 
# 		# cluster=(threshold2clusters[threshold][clt] for threshold in config["thresholds"] for clt in range(len(threshold2clusters[threshold]))))
# 		# ["resources/Data/FASTA/PE/CDHIT/{threshold}/{cluster}.fasta".format(threshold=config["thresholds"][x],
# 		# cluster=big_list_clusters[x][y]) for x in range(len(config["thresholds"])) for y in range(len(big_list_clusters[x]))]
# 		["resources/Alignments/{db}/MultipleSequencesAlign/T_Coffee_UPI/{threshold}/{cluster}.clustal_aln".format(db=db_name, threshold=config["thresholds"][x], 
# 		cluster=config[config["thresholds"][x]][y]) for x in range(len(config["thresholds"])) for y in range(len(config[config["thresholds"][x]]))]
# 	output:
# 		"mockup.out"
# 	run:
# 		with open("mockup.out", "w") as f:
# 			f.write("sucess!")


rule hmmbuild:
	input:
		"resources/Alignments/{db}/MultipleSequencesAlign/T_Coffee_UPI/{threshold}/{cluster}.clustal_aln"
	output:
		"resources/Data/HMMs/{db}/After_tcoffee_UPI/{threshold}/{cluster}.hmm"
	threads: config["threads"]
	log:
		"logs/{db}_hmmbuild_{threshold}_{cluster}.log"
	shell:
		"hmmbuild {output} {input}"


# rule mockup:
#  	input:
#  		["resources/Data/HMMs/{db}/After_tcoffee_UPI/{threshold}/{cluster}.hmm".format(db=db_name, threshold=config["thresholds"][x], 
# 		cluster=config[config["thresholds"][x]][y]) for x in range(len(config["thresholds"])) for y in range(len(config[config["thresholds"][x]]))]
#  	output:
#  		"mockup.out"
#  	run:
#  		with open("mockup.out", "w") as f:
#  			f.write("sucess!")


# files = {threshold: glob(f"resources/Data/FASTA/CDHIT/{threshold}/*.fasta") for threshold in config["thresholds"]}
# threshold2clusters = {k : [v.split("/")[-1].split("\\")[-1].split('.f')[0] for v in values] for k, values in files.items()}

# from scripts.snakemake_util import cat_hmms_input

def cat_hmms_input(wildcards):
	return expand("resources/Data/HMMs/{db}/After_tcoffee_UPI/{threshold}/{cluster}.hmm", db=db_name, threshold=wildcards, cluster=config[wildcards]) # threshold2clusters[wildcards])


rule cat_hmms:
	input:
	    lambda wildcards: cat_hmms_input(wildcards.threshold)
	output:
		"resources/Data/HMMs/{db}/After_tcoffee_UPI/{threshold}.hmm"
	threads: config["threads"]
	log:
		"logs/{db}_cat_hmms_{threshold}.log"
	shell:
		"cat {input} > {output}"


# rule mockup:
# 	input:
# 		expand("resources/Data/HMMs/{db}/After_tcoffee_UPI/{threshold}.hmm", threshold=config["thresholds"], db=db_name)
# 	output:
# 		"mockup.out"
# 	run:
#  		with open("mockup.out", "w") as f:
#  			f.write("sucess!")
