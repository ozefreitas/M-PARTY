name: CI

on:
  push:
    branches:
      - main
      - refactor
      - dev
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine the branch name
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "GIT_BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
          else
            echo "GIT_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
          fi

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          tags: mparty:latest
          build-args: GIT_BRANCH=${{ env.GIT_BRANCH }}  # Pass branch name dynamically
          outputs: type=docker, dest=/tmp/mparty.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mparty
          path: /tmp/mparty.tar

  version:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: mparty
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/mparty.tar
          docker image ls -a

      - name: Check base entrypoint
        run: docker run mparty bin/bash -c "ls /opt/conda/bin"

      - name: Print main script contents
        run: docker run mparty bin/bash -c "cat /opt/conda/bin/m-party.py"
      
      - name: Check m-party version
        run: docker run mparty bin/bash -c "m-party.py --version"

  annotation:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: mparty
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/mparty.tar
          docker image ls -a

      - name: Check base entrypoint
        run: docker run mparty bin/bash -c "ls"

      - name: Print M-PARTY's main script
        run: docker run mparty bin/bash -c "m-party.py -h"

      - name: Print M-PARTY's path
        run: docker run mparty bin/bash -c "cd "

      - name: Annotation workflow by FASTA input, report text creation and excel table format
        run: docker run mparty bin/bash -c "m-party.py -i M-PARTY/ci/positive_control.fasta --kegg K21104 -w both --hmm_db_name KEGG_test_both -o Testing_KEGG_positive --output_type excel"

      - name: Annotation workflow with gut metagenome proteins (negative dataset), generate same outputs
        run: docker run mparty bin/bash -c "m-party.py -i M-PARTY/ci/gut_metagenome_proteins.fasta -it metagenome --kegg K21104 -w both --hmm_db_name KEGG_test_both --verbose -o Testing_KEGG_positive --output_type excel -rt"

      - name: Annotation workflow with gut metagenome proteins (negative dataset), generate config file
        run: docker run mparty bin/bash -c "m-party.py -i M-PARTY/ci/gut_metagenome_proteins.fasta -it metagenome --kegg K21104 -w both --hmm_db_name KEGG_test_both --verbose -o Testing_KEGG_positive --output_type excel -rt --display_config"

  # validation:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Download artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: mparty
  #         path: /tmp

  #     - name: Load Docker image
  #       run: |
  #         docker load --input /tmp/mparty.tar
  #         docker image ls -a

  #     - name: Check base entrypoint
  #       run: docker run mparty bin/bash -c "ls"

  #     - name: Print M-PARTY's main script
  #       run: docker run mparty bin/bash -c "m-party.py -h"

  #     - name: Validation workflow alone
  #       run: docker run mparty bin/bash -c "m-party.py --validation --hmm_db_name PE"

  # annotation_validation:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Download artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: mparty
  #         path: /tmp

  #     - name: Load Docker image
  #       run: |
  #         docker load --input /tmp/mparty.tar
  #         docker image ls -a

  #     - name: Check base entrypoint
  #       run: docker run mparty bin/bash -c "ls"

  #     - name: Print M-PARTY's main script
  #       run: docker run mparty bin/bash -c "m-party.py -h"
      
  #     - name: Annotation workflow with gut metagenome proteins (negative dataset), add model validation script
  #       run: docker run mparty bin/bash -c "m-party.py -i M-PARTY/ci/gut_metagenome_proteins.fasta -it metagenome -o output_results -rt --output_type excel --validation --hmm_db_name PE"

  # annotation_validation_swapdb:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Download artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: mparty
  #         path: /tmp

  #     - name: Load Docker image
  #       run: |
  #         docker load --input /tmp/mparty.tar
  #         docker image ls -a

  #     - name: Check base entrypoint
  #       run: docker run mparty bin/bash -c "ls"

  #     - name: Print M-PARTY's main script
  #       run: docker run mparty bin/bash -c "m-party.py -h"

  #     - name: Annotation workflow with gut metagenome proteins (negative dataset), add model validation workflow with POLYMERASE as CONTROL
  #       run: docker run mparty bin/bash -c "m-party.py -i M-PARTY/ci/gut_metagenome_proteins.fasta -it metagenome -o output_results -rt --output_type excel --validation --hmm_db_name PE --negative_db M-PARTY/ci/polymerase_DB.fasta"

  db_construction:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: mparty
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/mparty.tar
          docker image ls -a

      - name: Check base entrypoint
        run: docker run mparty bin/bash -c "ls"

      - name: Print M-PARTY's main script
        run: docker run mparty bin/bash -c "m-party.py -h"

      - name: Database construction workflowfor with KEGG KO
        run: docker run mparty bin/bash -c "m-party.py -w database_construction --hmm_db_name test_KEGG_KO --kegg K21104 --verbose"
      
      - name: Database construction workflowfor with KEGG EC number
        run: docker run mparty bin/bash -c "m-party.py -w database_construction --hmm_db_name test_KEGG_EC --kegg 3.1.1.101 1.14.12.15 1.18.1.- 1.3.1.53 --verbose"

      - name: Database construction workflowfor with InterPro IPR
        run: docker run mparty bin/bash -c "m-party.py -w database_construction --hmm_db_name test_KEGG_IPR --interpro IPR000006 --verbose"

      - name: Database construction workflowfor with InterPro individual protein IDs
        run: docker run mparty bin/bash -c "m-party.py -w database_construction --hmm_db_name test_KEGG_Prots --interpro A0A000 A0A001 A0A002 --verbose"
      
      - name: Database construction workflow with small FASTA protein file
        run: docker run mparty bin/bash -c "m-party.py -w database_construction --hmm_db_name protein_file_inputest --input_seqs_db_const M-PARTY/ci/KEGG_nuc_test.fasta --input_type_db_const nucleic -t 8 --verbose"
      
  clean:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: mparty
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/mparty.tar
          docker image ls -a

      - name: Simpler database construction pipeline
        run: docker run mparty bin/bash -c "m-party.py -w database_construction --kegg K21104 --hmm_db_name PET_hydrolase"
      
      - name: Check error raise for clean data
        run: |
          if docker run mparty bin/bash -c "m-party.py --clean"; then
            echo "Error: Command was expected to fail but it succeeded."
            exit 1
          else
            echo "Success: Command failed as expected."
          fi

      - name: Clean data
        run: docker run mparty bin/bash -c "m-party.py --clean --hmm_db_name PET_hydrolase"